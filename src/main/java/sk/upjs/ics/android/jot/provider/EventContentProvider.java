package sk.upjs.ics.android.jot.provider;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

import sk.upjs.ics.android.util.Defaults;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static sk.upjs.ics.android.util.Defaults.ALL_COLUMNS;
import static sk.upjs.ics.android.util.Defaults.AUTOGENERATED_ID;
import static sk.upjs.ics.android.util.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.ics.android.util.Defaults.NO_GROUP_BY;
import static sk.upjs.ics.android.util.Defaults.NO_HAVING;
import static sk.upjs.ics.android.util.Defaults.NO_NULL_COLUMN_HACK;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.ics.android.util.Defaults.NO_SORT_ORDER;
import static sk.upjs.ics.android.util.Defaults.NO_TYPE;

/**
 * Created by Deniska on 22.6.2016.
 */
public class EventContentProvider extends ContentProvider {
    public static final String AUTHORITY = "sk.upjs.ics.android.jot.provider.EventContentProvider";

    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Event.TABLE_NAME)
            .build();

    private static final int URI_MATCH_EVENTS = 0;
    private static final int URI_MATCH_EVENT_BY_ID = 1;

    private static final String MIME_TYPE_EVENTS = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Event.TABLE_NAME;
    private static final String MIME_TYPE_SINGLE_EVENT = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Event.TABLE_NAME;

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private EventDatabaseOpenHelper databaseHelper;

    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY, Provider.Event.TABLE_NAME, URI_MATCH_EVENTS);
        uriMatcher.addURI(AUTHORITY, Provider.Event.TABLE_NAME + "/#", URI_MATCH_EVENT_BY_ID);

        this.databaseHelper = new EventDatabaseOpenHelper(getContext());
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_EVENTS:
                cursor = listEvents();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_EVENT_BY_ID:
                long id = ContentUris.parseId(uri);
                cursor = findById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }

    private Cursor findById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Event._ID + "=" + id;
        return db.query(Provider.Event.TABLE_NAME, ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listEvents() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Event.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_EVENTS:
                Uri newItemUri = saveEvent(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri;
            default:
                return Defaults.NO_URI;
        }
    }

    private Uri saveEvent(ContentValues values) {
        ContentValues employee = new ContentValues();
        employee.put(Provider.Event._ID, AUTOGENERATED_ID);
        employee.put(Provider.Event.DESCRIPTION, values.getAsString(Provider.Event.DESCRIPTION));
        employee.put(Provider.Event.START_MONTH, values.getAsString(Provider.Event.START_MONTH));
        employee.put(Provider.Event.START_DAY, values.getAsInteger(Provider.Event.START_DAY));
        employee.put(Provider.Event.START_HOUR, values.getAsInteger(Provider.Event.START_HOUR));
        employee.put(Provider.Event.END_MONTH, values.getAsString(Provider.Event.END_MONTH));
        employee.put(Provider.Event.END_DAY, values.getAsInteger(Provider.Event.END_DAY));
        employee.put(Provider.Event.END_HOUR, values.getAsInteger(Provider.Event.END_HOUR));

        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(Provider.Event.TABLE_NAME, NO_NULL_COLUMN_HACK, employee);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_EVENT_BY_ID:
                long id = ContentUris.parseId(uri);
                int affectedRows = databaseHelper.getWritableDatabase()
                        .delete(Provider.Event.TABLE_NAME, Provider.Event._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_EVENT_BY_ID:
                return MIME_TYPE_SINGLE_EVENT;
            case URI_MATCH_EVENTS:
                return MIME_TYPE_EVENTS;
        }
        return NO_TYPE;
    }


    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}
